mod rpc
{
    #[allow(dead_code)] pub fn type_def() -> impl :: std :: any :: Any {}
    #[allow(dead_code)] async fn run < 'de, Args, Ret, State >
    (func : impl frpc :: fn_once :: FnOnce < Args, Output = Ret >, state :
    State, reader : & mut & 'de [u8], w : &
    mut(impl frpc :: output :: AsyncWriter + Unpin + Send),) -> std :: io ::
    Result < () > where Args : frpc :: input :: Input < 'de, State >, Ret :
    frpc :: output :: Output,
    {
        let args = Args :: decode(state, reader).unwrap() ; let output =
        func.call_once(args) ; Ret :: send_output(output, w).await
    } pub async fn execute < W, State >
    (state : State, id : u16, data : Box < [u8] >, w : & mut W) -> :: std ::
    io :: Result < () > where W : :: frpc :: output :: AsyncWriter + Unpin +
    Send,
    {
        let mut reader = & * data ; match id
        {
            16 => run(super :: foo, state, & mut reader, w).await, 5 =>
            run(super :: bar, state, & mut reader, w).await, _ =>
            {
                return :: std :: result :: Result ::
                Err(:: std :: io :: Error ::
                new(:: std :: io :: ErrorKind :: AddrNotAvailable,
                "unknown id",))
            }
        }
    }
}